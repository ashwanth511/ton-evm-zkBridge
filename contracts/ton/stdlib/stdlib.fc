;; Standard library for funC
;; Basic primitive types and arithmetic

{-
    Standard library for funC
    
    Contains basic primitives, arithmetic operations, and utility functions
-}

#include "constants.fc";

;; Basic cell operations
forall X -> tuple cons(X head, tuple tail) asm "CONS";
forall X -> (X, tuple) uncons(tuple list) asm "UNCONS";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
tuple null() asm "NIL";
int tlen(tuple t) asm "TLEN";
forall X -> tuple single(X x) asm "SINGLE";
forall X -> tuple pair(X x, X y) asm "PAIR";
forall X -> tuple triple(X x, X y, X z) asm "TRIPLE";

;; Tuple operations
(int) ~divmod(int x, int y) asm "DIVMOD";
(int) ~mod(int x, int y) asm "MOD";
(int) ~div(int x, int y) asm "DIV";

;; Comparison operations
int equal_slices(slice s1, slice s2) asm "SDEQ";
int builder_null?(builder b) asm "ISNULL";
int cell_null?(cell c) asm "ISNULL";
int slice_null?(slice s) asm "ISNULL";

;; Slice operations
int slice_bits(slice s) asm "SBITS";
int slice_refs(slice s) asm "SREFS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
builder store_ref(builder b, cell c) asm "STREF";
cell end_cell(builder b) asm "ENDC";

;; Hashing and cryptography
int cell_hash(cell c) asm "HASHCU";
int slice_hash(slice s) asm "HASHSU";
int string_hash(slice s) asm "SHA256U";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int check_data_signature(slice data, slice signature, int public_key) asm "CHKSIGNS";

;; Exception handling
() throw(int error_code) impure asm "THROW";
() throw_if(int cond, int error_code) impure asm "THROWIF";
() throw_unless(int cond, int error_code) impure asm "THROWIFNOT";
